package com.edu.controller;

import java.awt.image.BufferedImage;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.edu.domain.ImageCode;
import com.edu.domain.User;
import com.edu.service.SystemConfigService;
import com.edu.service.UserServiceI;
import com.edu.vo.UserVo;
import com.google.code.kaptcha.Constants;
import com.google.code.kaptcha.Producer;

@Controller
public class LoginController {
	Logger logger = LoggerFactory.getLogger(UserController.class);
	@Autowired
	private UserServiceI userService;
	@Autowired
    private Producer captchaProducer = null; 
	@Autowired
	private SystemConfigService systemConfigService;
	 /*
     * @Resource默认按 byName 自动注入,是J2EE提供的， 需导入Package: javax.annotation.Resource;
     * 
     * @Resource有两个中重要的属性：name和type ，而Spring将@Resource注解的name属性解析为bean的
     * 名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用 type属性时则使用
     * byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用by Name自动注入策略。
     */
	@Resource
	private ImageCode imageCode;
	
	private static String sRand;
	
	@RequestMapping("/login.do")
	public String getAllUser(UserVo user,HttpServletRequest request){
		logger.debug("开始访问。。。。。。。。。");
		String msg = "";
		
		String name = user.getName();
		User u = userService.getUserByName(name);
		if(u!=null){
			
		}
		
		SecurityUtils.getSecurityManager().logout(SecurityUtils.getSubject());  
		try{
			// 登录后存放进shiro token  
	        UsernamePasswordToken token = new UsernamePasswordToken(user.getName(), user.getPassword());  
	        Subject subject = SecurityUtils.getSubject();  
	        subject.login(token);  
		}catch(Exception e){
			e.printStackTrace();
			msg="用户名或者密码错误！";
			request.setAttribute("msg", msg);
			return "";
		}
		return "";
	}
	
	@RequestMapping(value = "/getKaptchaImage.do")
    public void getKaptchaImage(HttpServletRequest request, HttpServletResponse response) throws Exception {  
        HttpSession session = request.getSession();
        /*String code = (String)session.getAttribute(Constants.KAPTCHA_SESSION_KEY);  
        System.out.println("******************验证码是: " + code + "******************");  */
          
        response.setDateHeader("Expires", 0);  
          
        // Set standard HTTP/1.1 no-cache headers.  
        response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
          
        // Set IE extended HTTP/1.1 no-cache headers (use addHeader).  
        response.addHeader("Cache-Control", "post-check=0, pre-check=0");
          
        // Set standard HTTP/1.0 no-cache header.  
        response.setHeader("Pragma", "no-cache");
          
        // return a jpeg  
        response.setContentType("image/jpeg");
          
        // create the text for the image  
        String capText = captchaProducer.createText();
        // store the text in the session  
        session.setAttribute(Constants.KAPTCHA_SESSION_KEY, capText);
        session.setAttribute("TIMEOUT", System.currentTimeMillis());
          
        // create the image with the text  
        BufferedImage bi = captchaProducer.createImage(capText);  
        ServletOutputStream out = response.getOutputStream();  
        // write the data out  
        ImageIO.write(bi, "jpg", out);  
        try {  
            out.flush();  
        } finally {  
            out.close();  
        }  
    }
	
	@RequestMapping(value = "/validateKaptchaImage")
    @ResponseBody
    public boolean validateKaptchaImage(HttpSession session,String kaptcha) {  
		boolean flag = false;
    	try {
    		flag = systemConfigService.validateKaptchaImage(session,kaptcha);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
    }
/*    @RequestMapping(value = "/getImage.do")
    public void getImage(HttpServletRequest request, HttpServletResponse response
            ) throws IOException {
        // 禁止图片缓存
        response.setHeader("Pragma", "no-cache");
        response.setHeader("Cache-Control", "no-cache");
        response.setDateHeader("Expires", 0);
        response.setContentType("image/jpeg");
        // 将图像输出到servlet输出流中
        ServletOutputStream sos = response.getOutputStream();
        ImageIO.write(imageCode.getImage(request), "jpeg", sos);
        sos.close();
        sRand=(String)request.getAttribute("sRand");
        String result="ok";
        System.out.println(sRand);
    }*/
}
